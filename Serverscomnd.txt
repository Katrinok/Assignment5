//std::cout << "Ég er hér NÚNA" << std::endl;

    // Now respond with a string on the format QUERYSERVERS,FROM_GROUP_ID,FROM_IP_ADDRESS,FROM_PORT,<connected servers group id, ip, and port>
    std::string queryservers = QueryserversResponse(groupID, myServer); 
    // Add STX and ETX
    queryservers = wrapWithSTXETX(queryservers);

    
    if(send(serverSock, queryservers.c_str(), queryservers.length(), 0) < 0) {
        perror("Error sending SERVERS message");
    }
    std::cout << "SERVERS sent: " << queryservers << std::endl; //DEBUG


    // Get the response, the servers that the other server is connected to
    char responseBuffer2[2048]; // Buffer to hold the response
    memset(responseBuffer2, 0, sizeof(responseBuffer2)); // Clear the buffer

    int bytesRead2 = recv(serverSock, responseBuffer2, sizeof(responseBuffer2)-1, 0); // Receive the data
    if(bytesRead2 < 0) {
        perror("Error receiving response from server");
        close(serverSock);
        return -1;
    }
    else if(bytesRead2 == 0) {
        std::cout << "Server closed connection after sending SERVERS" << std::endl;
        close(serverSock);
        return -1;
    }
    else {
        std::cout << "Received response after SERVERS: " << responseBuffer2 << std::endl;
    }



    char responseBuffer[1025]; // Buffer to hold the response
    memset(responseBuffer, 0, sizeof(responseBuffer)); // Clear the buffer

    int bytesRead = recv(serverSock, responseBuffer, sizeof(responseBuffer)-1, 0); // Receive the data
    if(bytesRead < 0) {
        perror("Error receiving response from server");
        close(serverSock);
        return -1;
    }
    else if(bytesRead == 0) {
        std::cout << "Server closed connection after sending QUERYSERVERS" << std::endl;
        close(serverSock);
        return -1;
    }
    else {
        std::cout << "Received response after connection: " << responseBuffer << std::endl;
    }


    std::string receivedResponse = responseBuffer;   // Convert char array to string
    size_t startPos = receivedResponse.find(",");    // Find position of the first comma
    std::string receivedGroupID = receivedResponse.substr(startPos + 1);  // Extract group ID
    Server newServer(receivedGroupID, ip_address, port, serverSock);
    connectedServers.push_back(newServer);



        printf("Connected to server at %s:%d\n", ip_address.c_str(), port);
    
    std::string message = "QUERYSERVERS," + groupID;
    message = wrapWithSTXETX(message);
    std::cout << "message: " << message << std::endl; //DEBUG

    if(send(serverSock, message.c_str(), message.length(), 0) < 0) {
        perror("Error sending QUERYSERVERS message");
        return -1;
    }
    std::cout << "QUERYSERVERS sent: " << message << std::endl;


    // Get the response, the servers that the other server is connected to
    for(int i = 1; i < tokens.size(); i++) {
            std::vector<std::string> server_tokens;
            std::stringstream stream(tokens[i]);
            std::string server_token;
            while(std::getline(stream, server_token, ';')) {
                server_tokens.push_back(server_token);
            }
            std::string groupID = server_tokens[0];
            std::string ip_address = server_tokens[1];
            int port = std::stoi(server_tokens[2]);
            int socket =  connectToServer(ip_address, port, groupID, server);
            FD_SET(socket, openSockets);
            // And update the maximum file descriptor
            *maxfds = std::max(*maxfds, socket);
        }